Angular CLI
-------------

GENERANDO COMPONENTES AUTOMATICAMENTE:
--

Genera componente y lo importa automaticamentes, usamos la consola.

Scafolding (generar codigo automaticamente)

En la terminal:

"ng generate component cursos"

este codigo genera el componente con sus template y automaticamente hace el import
a NgModule principal.


{{ elemento }}
Traigo el contenido de la propiedad titulo que instanciamos en el constructor del componente, se llama
binding por interpolacion

HOOKS
--
Son codigos que se ejecutan cuando el componente esta en cierto estado.

OnInit: se ejecuta cuando se lanza el componente

DoCheck: se ejecuta cuando se produce algun cambio en el componente o la app

OnDestroy: se ejec antes de eliminar la instancia de un componente




ngStyle = Aplica estilos a los elementos [ngStyle] = {'background': config.color }

ngFor = Lo usamos para recorrer Arrays
  Ejemplo:
      <li *ngFor="let deportiva of zapatillas">
        {{ deportiva.nombre }} - <strong>{{ deportiva.precio }}</strong>
      </li>


MODELS
--

Son modelos que contienen los datos para una entidad concreta
Se usa como molde para crear un nuevoi


DIRECTIVAS
--

Funcionalidad que vamos a tener en nuestras vistas o plantillas
ej: etiquetas de un componente, estructuras de control


ngIf: Directiva estructural con condicional

  ejemplo:
    *ngIf="mostrar_videojuegos" = estructura de control condicional

  ----------------------------------------------------------------
  ---- Para generar un else se usa una directiva nueva: ngTemplate
  ----  con esta directiva creamos una accion else a realizar
  ----------------------------------------------------------------

  <div *ngIf="identificado; else nombreFuncionElse">
    <h3>Estas identificado en la app</h3>
  </div>

  <ng-template #nombreFuncionElse>
    <p>No estas identificado, pulsa este boton para identificarte</p>
    <button (click)="setIdentificado()">Identificarse</button>
  </ng-template>



ngFor: Directiva for para recorrer

ngSwitch: Directiva condicional

Class: Asignarle una clase a un elemento cuando se cumpla una condicion

ngClass: puedo asignar varias clases al mismo tiempo

routerLink: Directiva que se usa para generar el menu con rutas


TWO WAY DATA BINDING:
------------------

Permite modificar datos o atributos del componente y que se vean reflejados
inmediatamente.

Trabaja de forma bidireccional, se modifica y se muestra al mismo tiempo

directiva [(ngModel)] para modificar mediante formularios, para ESO ES IMPORTANTE
CARGAR EL MODULO DE FORMULARIOS DE ANGULAR EN EL APP.MODULE

import { FormsModule } from '@angular/forms';


EVENTOS:
--------------

click: ejecuta en click
blur: cuando salimos del input
keyup: cuando tocamos una tecla



RUTAS EN ANGULAR:
----------

* En Index.html hay que tener el <base href="/">
* Crear el app.routing.ts
* Importar modulos de routing de Angular
* Cargamos las rutas
* las importamos desde app.module.ts
* y con las etiquetas <router-outlet></router-outlet> mostramos el contenido pedido en el routing para cada ruta


CREANDO MENU:
----------

Usamos la directiva routerLink

<a [routerLink]="['/']">Home</a>
[routerLinkActive]="['active']" Añade un estilo a la clase activa


PARAMETROS POR URL:
----------
* primero se modifican en el routing la ruta que recibe parametros
  { path: 'cursos/:nombre', component: CursosComponent },

* luego necesitamos importar componentes dentro del componente que recibe parametros
  import { Router, ActivatedRoute, Params } from '@angular/router';

* Importamos esas props en el constructor
      constructor(
        private _route: ActivatedRoute,
        private _router: Router
      ) { }

* Para agarrar los valores que le paso puedo usar

    ngOnInit() {
      this._route.params.subscribe((params: Params) => {
        console.log();
      })
    }


REDIRECCIONES:
----------

Ejemplo de funcion que redirige

redirigir(){
  this._router.navigate(['/zapatillas']);
}


SERVICIOS:
----------
Clases que separan la logica de la app

* creamos la carpeta "Services"
* creamos el archivo zapatilla.services.ts
* creamos los metodos que van a hacer las peticiones

* lo importamos en el componente Zapatilla
* y lo inyectamos como un provider de servicio en @component
* lo cargamos al constructor


SERVICIOS PARA PETICIONES:
-----------

* creamo el modulo externo
* lo cargamos al component y al routing
* creamos el servicio
* importamos el modulo HttpClientModule en el app module
    import { HttpClientModule } from '@angular/common/http';
* lo cargamos a los imports dentro de app.module
* una vez creado el servicio creamos los metodos de conexion
(api rest publica: https://reqres.in/)

* luego se carga este servicio en el componente que lo va a usar, con import
* lo cargamos como provider a ese componente
* y lo inyectamos (el servicio) en el constructor
* a traves de metodos del servicio y subscribe recibimos el resultado

* de esta forma puedo usar en la vista la informacion recibida

----- Metodos post

* creamos addUser en servicios peticiones
    // se envia un objeto json string
    let params = JSON.stringify(user);

    // indicamos las cabeceras
    let headers = new HttpHeaders().set('Content-Type', 'application/json');

    // armamos la conexion: Direccion , objeto a guardar
    return this._http.post(this.url + 'api/users', params, {headers: headers});

* usamos el servicio en el componente:

    onSubmit(form){
      this._peticionesServices.addUser(this.new_user).subscribe(
        response => {
          console.log(response);
          this.usuario_guardado = response;
          form.reset();
        },
        error => {
          console.log(<any>error);
        }
      )
    }

Efecto de carga
-----------


PIPES:
-------------
filtro o pequeñas tareas o funciones. Ej: pipes para convertir texto de min a mayuscula.

Pipes de fecha: {{ fecha | date: 'fullDate' }} con el | indicamos que viene un filtro | dd/MM/yy

Para crearlo: Creamos el pipe y lo cargamos al app.module


FORMULARIO:
------------
* creamos el componente
* lo cargamos al component
* creamos la ruta
* creamos el modelo ( clase de objeto ) que vamos a usar en el formulario
* creamos el formu en html
* le asignamos un nombre con prefijo # Ej: #FormContacto="ngForm"
* le asignamos un metodo con (ngSubmit)="onSubmit()"
* le asigno un nombre a cada input : #nombre="ngModel"
* le genero el two way data binding para modificar el objeto en el componente:  [(ngModel)]="usario.nombre"

Validando:

* se hace a traves de la val de html5
* agregamos: required /
* mediante un ngIF puedo tirar los mensajes
    <span *ngIf="!nombre.valid">
      El nombre es obligatorio
    </span>

    ** otro: si el campo fue tocado y no fue cargado, muestro el mensaje
      <span *ngIf="nombre.touched && !nombre.valid">

* ademas se pueden agregar pattern de validaciones
* chequeo que el formulario sea valido antes de enviar
  [disabled]="!formContacto.form.valid"
* vaciando el formu
